// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/job/v1beta1/jobstate.proto

package v1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobStateServiceClient is the client API for JobStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobStateServiceClient interface {
	GetJobState(ctx context.Context, in *JobStateRequest, opts ...grpc.CallOption) (*JobStateResponse, error)
	SetJobState(ctx context.Context, in *JobStateRequest, opts ...grpc.CallOption) (*JobStateResponse, error)
}

type jobStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobStateServiceClient(cc grpc.ClientConnInterface) JobStateServiceClient {
	return &jobStateServiceClient{cc}
}

func (c *jobStateServiceClient) GetJobState(ctx context.Context, in *JobStateRequest, opts ...grpc.CallOption) (*JobStateResponse, error) {
	out := new(JobStateResponse)
	err := c.cc.Invoke(ctx, "/api.job.v1beta1.JobStateService/GetJobState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobStateServiceClient) SetJobState(ctx context.Context, in *JobStateRequest, opts ...grpc.CallOption) (*JobStateResponse, error) {
	out := new(JobStateResponse)
	err := c.cc.Invoke(ctx, "/api.job.v1beta1.JobStateService/SetJobState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobStateServiceServer is the server API for JobStateService service.
// All implementations should embed UnimplementedJobStateServiceServer
// for forward compatibility
type JobStateServiceServer interface {
	GetJobState(context.Context, *JobStateRequest) (*JobStateResponse, error)
	SetJobState(context.Context, *JobStateRequest) (*JobStateResponse, error)
}

// UnimplementedJobStateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedJobStateServiceServer struct {
}

func (UnimplementedJobStateServiceServer) GetJobState(context.Context, *JobStateRequest) (*JobStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobState not implemented")
}
func (UnimplementedJobStateServiceServer) SetJobState(context.Context, *JobStateRequest) (*JobStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJobState not implemented")
}

// UnsafeJobStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobStateServiceServer will
// result in compilation errors.
type UnsafeJobStateServiceServer interface {
	mustEmbedUnimplementedJobStateServiceServer()
}

func RegisterJobStateServiceServer(s grpc.ServiceRegistrar, srv JobStateServiceServer) {
	s.RegisterService(&JobStateService_ServiceDesc, srv)
}

func _JobStateService_GetJobState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobStateServiceServer).GetJobState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.job.v1beta1.JobStateService/GetJobState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobStateServiceServer).GetJobState(ctx, req.(*JobStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobStateService_SetJobState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobStateServiceServer).SetJobState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.job.v1beta1.JobStateService/SetJobState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobStateServiceServer).SetJobState(ctx, req.(*JobStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobStateService_ServiceDesc is the grpc.ServiceDesc for JobStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.job.v1beta1.JobStateService",
	HandlerType: (*JobStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJobState",
			Handler:    _JobStateService_GetJobState_Handler,
		},
		{
			MethodName: "SetJobState",
			Handler:    _JobStateService_SetJobState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/job/v1beta1/jobstate.proto",
}
