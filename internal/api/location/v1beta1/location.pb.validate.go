// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/location/v1beta1/location.proto

package v1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdateLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLocationRequestMultiError, or nil if none found.
func (m *UpdateLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAreaKey() != "" {

		if utf8.RuneCountInString(m.GetAreaKey()) < 3 {
			err := UpdateLocationRequestValidationError{
				field:  "AreaKey",
				reason: "value length must be at least 3 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLocationRequestValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLocationRequestValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLocationRequestValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ValidateOnly

	if len(errors) > 0 {
		return UpdateLocationRequestMultiError(errors)
	}

	return nil
}

// UpdateLocationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateLocationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLocationRequestMultiError) AllErrors() []error { return m }

// UpdateLocationRequestValidationError is the validation error returned by
// UpdateLocationRequest.Validate if the designated constraints aren't met.
type UpdateLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLocationRequestValidationError) ErrorName() string {
	return "UpdateLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLocationRequestValidationError{}

// Validate checks the field values on UpdateLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLocationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLocationResponseMultiError, or nil if none found.
func (m *UpdateLocationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLocationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AreaKey

	// no validation rules for WorkerId

	if all {
		switch v := interface{}(m.GetCrossing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLocationResponseValidationError{
					field:  "Crossing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLocationResponseValidationError{
					field:  "Crossing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrossing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLocationResponseValidationError{
				field:  "Crossing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLocationResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLocationResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLocationResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateLocationResponseMultiError(errors)
	}

	return nil
}

// UpdateLocationResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateLocationResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateLocationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLocationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLocationResponseMultiError) AllErrors() []error { return m }

// UpdateLocationResponseValidationError is the validation error returned by
// UpdateLocationResponse.Validate if the designated constraints aren't met.
type UpdateLocationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLocationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLocationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLocationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLocationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLocationResponseValidationError) ErrorName() string {
	return "UpdateLocationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLocationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLocationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLocationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLocationResponseValidationError{}

// Validate checks the field values on GetLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLocationRequestMultiError, or nil if none found.
func (m *GetLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AreaKey

	// no validation rules for WorkerId

	if len(errors) > 0 {
		return GetLocationRequestMultiError(errors)
	}

	return nil
}

// GetLocationRequestMultiError is an error wrapping multiple validation errors
// returned by GetLocationRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLocationRequestMultiError) AllErrors() []error { return m }

// GetLocationRequestValidationError is the validation error returned by
// GetLocationRequest.Validate if the designated constraints aren't met.
type GetLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLocationRequestValidationError) ErrorName() string {
	return "GetLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLocationRequestValidationError{}

// Validate checks the field values on GetLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLocationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLocationResponseMultiError, or nil if none found.
func (m *GetLocationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLocationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AreaKey

	// no validation rules for WorkerId

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLocationResponseValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLocationResponseValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLocationResponseValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastSeenTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLocationResponseValidationError{
					field:  "LastSeenTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLocationResponseValidationError{
					field:  "LastSeenTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastSeenTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLocationResponseValidationError{
				field:  "LastSeenTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLocationResponseMultiError(errors)
	}

	return nil
}

// GetLocationResponseMultiError is an error wrapping multiple validation
// errors returned by GetLocationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLocationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLocationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLocationResponseMultiError) AllErrors() []error { return m }

// GetLocationResponseValidationError is the validation error returned by
// GetLocationResponse.Validate if the designated constraints aren't met.
type GetLocationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLocationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLocationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLocationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLocationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLocationResponseValidationError) ErrorName() string {
	return "GetLocationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLocationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLocationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLocationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLocationResponseValidationError{}
