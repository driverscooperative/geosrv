// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/worker/v1beta1/worker.proto

package v1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetWorkerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetWorkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkerRequestMultiError, or nil if none found.
func (m *GetWorkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWorkerId() != "" {

		if utf8.RuneCountInString(m.GetWorkerId()) > 20 {
			err := GetWorkerRequestValidationError{
				field:  "WorkerId",
				reason: "value length must be at most 20 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetWorkerRequestMultiError(errors)
	}

	return nil
}

// GetWorkerRequestMultiError is an error wrapping multiple validation errors
// returned by GetWorkerRequest.ValidateAll() if the designated constraints
// aren't met.
type GetWorkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkerRequestMultiError) AllErrors() []error { return m }

// GetWorkerRequestValidationError is the validation error returned by
// GetWorkerRequest.Validate if the designated constraints aren't met.
type GetWorkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkerRequestValidationError) ErrorName() string { return "GetWorkerRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetWorkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkerRequestValidationError{}

// Validate checks the field values on GetWorkerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetWorkerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkerResponseMultiError, or nil if none found.
func (m *GetWorkerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorker()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkerResponseValidationError{
					field:  "Worker",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkerResponseValidationError{
					field:  "Worker",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorker()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkerResponseValidationError{
				field:  "Worker",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWorkerResponseMultiError(errors)
	}

	return nil
}

// GetWorkerResponseMultiError is an error wrapping multiple validation errors
// returned by GetWorkerResponse.ValidateAll() if the designated constraints
// aren't met.
type GetWorkerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkerResponseMultiError) AllErrors() []error { return m }

// GetWorkerResponseValidationError is the validation error returned by
// GetWorkerResponse.Validate if the designated constraints aren't met.
type GetWorkerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkerResponseValidationError) ErrorName() string {
	return "GetWorkerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkerResponseValidationError{}

// Validate checks the field values on UpdateWorkerStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkerStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkerStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkerStatusRequestMultiError, or nil if none found.
func (m *UpdateWorkerStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkerStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWorkerId() != "" {

		if utf8.RuneCountInString(m.GetWorkerId()) > 20 {
			err := UpdateWorkerStatusRequestValidationError{
				field:  "WorkerId",
				reason: "value length must be at most 20 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if _, ok := WorkerStatus_name[int32(m.GetStatus())]; !ok {
		err := UpdateWorkerStatusRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateWorkerStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkerStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkerStatusRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateWorkerStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkerStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkerStatusRequestMultiError) AllErrors() []error { return m }

// UpdateWorkerStatusRequestValidationError is the validation error returned by
// UpdateWorkerStatusRequest.Validate if the designated constraints aren't met.
type UpdateWorkerStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkerStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkerStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkerStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkerStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkerStatusRequestValidationError) ErrorName() string {
	return "UpdateWorkerStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkerStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkerStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkerStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkerStatusRequestValidationError{}

// Validate checks the field values on UpdateWorkerStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkerStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkerStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkerStatusResponseMultiError, or nil if none found.
func (m *UpdateWorkerStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkerStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkerId

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateWorkerStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateWorkerStatusResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateWorkerStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateWorkerStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkerStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkerStatusResponseMultiError) AllErrors() []error { return m }

// UpdateWorkerStatusResponseValidationError is the validation error returned
// by UpdateWorkerStatusResponse.Validate if the designated constraints aren't met.
type UpdateWorkerStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkerStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkerStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkerStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkerStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkerStatusResponseValidationError) ErrorName() string {
	return "UpdateWorkerStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkerStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkerStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkerStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkerStatusResponseValidationError{}

// Validate checks the field values on ListWorkersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkersRequestMultiError, or nil if none found.
func (m *ListWorkersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListWorkersRequestMultiError(errors)
	}

	return nil
}

// ListWorkersRequestMultiError is an error wrapping multiple validation errors
// returned by ListWorkersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListWorkersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkersRequestMultiError) AllErrors() []error { return m }

// ListWorkersRequestValidationError is the validation error returned by
// ListWorkersRequest.Validate if the designated constraints aren't met.
type ListWorkersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkersRequestValidationError) ErrorName() string {
	return "ListWorkersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkersRequestValidationError{}

// Validate checks the field values on Worker with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Worker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Worker with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WorkerMultiError, or nil if none found.
func (m *Worker) ValidateAll() error {
	return m.validate(true)
}

func (m *Worker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkerId

	// no validation rules for Status

	if len(errors) > 0 {
		return WorkerMultiError(errors)
	}

	return nil
}

// WorkerMultiError is an error wrapping multiple validation errors returned by
// Worker.ValidateAll() if the designated constraints aren't met.
type WorkerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkerMultiError) AllErrors() []error { return m }

// WorkerValidationError is the validation error returned by Worker.Validate if
// the designated constraints aren't met.
type WorkerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkerValidationError) ErrorName() string { return "WorkerValidationError" }

// Error satisfies the builtin error interface
func (e WorkerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkerValidationError{}

// Validate checks the field values on ListWorkersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkersResponseMultiError, or nil if none found.
func (m *ListWorkersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWorkers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkersResponseValidationError{
						field:  fmt.Sprintf("Workers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkersResponseValidationError{
						field:  fmt.Sprintf("Workers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkersResponseValidationError{
					field:  fmt.Sprintf("Workers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListWorkersResponseMultiError(errors)
	}

	return nil
}

// ListWorkersResponseMultiError is an error wrapping multiple validation
// errors returned by ListWorkersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWorkersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkersResponseMultiError) AllErrors() []error { return m }

// ListWorkersResponseValidationError is the validation error returned by
// ListWorkersResponse.Validate if the designated constraints aren't met.
type ListWorkersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkersResponseValidationError) ErrorName() string {
	return "ListWorkersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkersResponseValidationError{}
