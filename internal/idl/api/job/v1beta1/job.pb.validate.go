// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/job/v1beta1/job.proto

package v1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on JobInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JobInfoMultiError, or nil if none found.
func (m *JobInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *JobInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for WorkerId

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobInfoValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobInfoValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobInfoValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobInfoValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobInfoValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobInfoValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetPickupDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobInfoValidationError{
					field:  "PickupDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobInfoValidationError{
					field:  "PickupDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPickupDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobInfoValidationError{
				field:  "PickupDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PickupAddr

	if all {
		switch v := interface{}(m.GetPickupLoc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobInfoValidationError{
					field:  "PickupLoc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobInfoValidationError{
					field:  "PickupLoc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPickupLoc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobInfoValidationError{
				field:  "PickupLoc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DropoffAddr

	if all {
		switch v := interface{}(m.GetDropoffLoc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobInfoValidationError{
					field:  "DropoffLoc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobInfoValidationError{
					field:  "DropoffLoc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDropoffLoc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobInfoValidationError{
				field:  "DropoffLoc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TripType

	// no validation rules for Category

	if len(errors) > 0 {
		return JobInfoMultiError(errors)
	}

	return nil
}

// JobInfoMultiError is an error wrapping multiple validation errors returned
// by JobInfo.ValidateAll() if the designated constraints aren't met.
type JobInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobInfoMultiError) AllErrors() []error { return m }

// JobInfoValidationError is the validation error returned by JobInfo.Validate
// if the designated constraints aren't met.
type JobInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobInfoValidationError) ErrorName() string { return "JobInfoValidationError" }

// Error satisfies the builtin error interface
func (e JobInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobInfoValidationError{}

// Validate checks the field values on ImportJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImportJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportJobRequestMultiError, or nil if none found.
func (m *ImportJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportJobRequestValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportJobRequestValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportJobRequestValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ImportJobRequestMultiError(errors)
	}

	return nil
}

// ImportJobRequestMultiError is an error wrapping multiple validation errors
// returned by ImportJobRequest.ValidateAll() if the designated constraints
// aren't met.
type ImportJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportJobRequestMultiError) AllErrors() []error { return m }

// ImportJobRequestValidationError is the validation error returned by
// ImportJobRequest.Validate if the designated constraints aren't met.
type ImportJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportJobRequestValidationError) ErrorName() string { return "ImportJobRequestValidationError" }

// Error satisfies the builtin error interface
func (e ImportJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportJobRequestValidationError{}

// Validate checks the field values on ImportJobResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImportJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportJobResponseMultiError, or nil if none found.
func (m *ImportJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	if len(errors) > 0 {
		return ImportJobResponseMultiError(errors)
	}

	return nil
}

// ImportJobResponseMultiError is an error wrapping multiple validation errors
// returned by ImportJobResponse.ValidateAll() if the designated constraints
// aren't met.
type ImportJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportJobResponseMultiError) AllErrors() []error { return m }

// ImportJobResponseValidationError is the validation error returned by
// ImportJobResponse.Validate if the designated constraints aren't met.
type ImportJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportJobResponseValidationError) ErrorName() string {
	return "ImportJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportJobResponseValidationError{}

// Validate checks the field values on ExportJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExportJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportJobRequestMultiError, or nil if none found.
func (m *ExportJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ExportJobRequestMultiError(errors)
	}

	return nil
}

// ExportJobRequestMultiError is an error wrapping multiple validation errors
// returned by ExportJobRequest.ValidateAll() if the designated constraints
// aren't met.
type ExportJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportJobRequestMultiError) AllErrors() []error { return m }

// ExportJobRequestValidationError is the validation error returned by
// ExportJobRequest.Validate if the designated constraints aren't met.
type ExportJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportJobRequestValidationError) ErrorName() string { return "ExportJobRequestValidationError" }

// Error satisfies the builtin error interface
func (e ExportJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportJobRequestValidationError{}

// Validate checks the field values on ExportJobItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExportJobItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportJobItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExportJobItemMultiError, or
// nil if none found.
func (m *ExportJobItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportJobItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportJobItemValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportJobItemValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportJobItemValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportJobItemMultiError(errors)
	}

	return nil
}

// ExportJobItemMultiError is an error wrapping multiple validation errors
// returned by ExportJobItem.ValidateAll() if the designated constraints
// aren't met.
type ExportJobItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportJobItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportJobItemMultiError) AllErrors() []error { return m }

// ExportJobItemValidationError is the validation error returned by
// ExportJobItem.Validate if the designated constraints aren't met.
type ExportJobItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportJobItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportJobItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportJobItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportJobItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportJobItemValidationError) ErrorName() string { return "ExportJobItemValidationError" }

// Error satisfies the builtin error interface
func (e ExportJobItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportJobItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportJobItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportJobItemValidationError{}

// Validate checks the field values on ExportJobResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExportJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportJobResponseMultiError, or nil if none found.
func (m *ExportJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetJobs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExportJobResponseValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExportJobResponseValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExportJobResponseValidationError{
					field:  fmt.Sprintf("Jobs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExportJobResponseMultiError(errors)
	}

	return nil
}

// ExportJobResponseMultiError is an error wrapping multiple validation errors
// returned by ExportJobResponse.ValidateAll() if the designated constraints
// aren't met.
type ExportJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportJobResponseMultiError) AllErrors() []error { return m }

// ExportJobResponseValidationError is the validation error returned by
// ExportJobResponse.Validate if the designated constraints aren't met.
type ExportJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportJobResponseValidationError) ErrorName() string {
	return "ExportJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportJobResponseValidationError{}

// Validate checks the field values on GetAvailableJobsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAvailableJobsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAvailableJobsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAvailableJobsRequestMultiError, or nil if none found.
func (m *GetAvailableJobsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAvailableJobsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAreaKey()) < 1 {
		err := GetAvailableJobsRequestValidationError{
			field:  "AreaKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWorkerId()) > 36 {
		err := GetAvailableJobsRequestValidationError{
			field:  "WorkerId",
			reason: "value length must be at most 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRadiusMeters() <= 0 {
		err := GetAvailableJobsRequestValidationError{
			field:  "RadiusMeters",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() > 25 {
		err := GetAvailableJobsRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 25",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAvailableJobsRequestMultiError(errors)
	}

	return nil
}

// GetAvailableJobsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAvailableJobsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAvailableJobsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAvailableJobsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAvailableJobsRequestMultiError) AllErrors() []error { return m }

// GetAvailableJobsRequestValidationError is the validation error returned by
// GetAvailableJobsRequest.Validate if the designated constraints aren't met.
type GetAvailableJobsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvailableJobsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvailableJobsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvailableJobsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvailableJobsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvailableJobsRequestValidationError) ErrorName() string {
	return "GetAvailableJobsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAvailableJobsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvailableJobsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvailableJobsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvailableJobsRequestValidationError{}

// Validate checks the field values on Location with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Location) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Location with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocationMultiError, or nil
// if none found.
func (m *Location) ValidateAll() error {
	return m.validate(true)
}

func (m *Location) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Lat

	// no validation rules for Lng

	// no validation rules for Address

	if len(errors) > 0 {
		return LocationMultiError(errors)
	}

	return nil
}

// LocationMultiError is an error wrapping multiple validation errors returned
// by Location.ValidateAll() if the designated constraints aren't met.
type LocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationMultiError) AllErrors() []error { return m }

// LocationValidationError is the validation error returned by
// Location.Validate if the designated constraints aren't met.
type LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationValidationError) ErrorName() string { return "LocationValidationError" }

// Error satisfies the builtin error interface
func (e LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationValidationError{}

// Validate checks the field values on Estimate with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Estimate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Estimate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EstimateMultiError, or nil
// if none found.
func (m *Estimate) ValidateAll() error {
	return m.validate(true)
}

func (m *Estimate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DistanceMeters

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EstimateMultiError(errors)
	}

	return nil
}

// EstimateMultiError is an error wrapping multiple validation errors returned
// by Estimate.ValidateAll() if the designated constraints aren't met.
type EstimateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateMultiError) AllErrors() []error { return m }

// EstimateValidationError is the validation error returned by
// Estimate.Validate if the designated constraints aren't met.
type EstimateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateValidationError) ErrorName() string { return "EstimateValidationError" }

// Error satisfies the builtin error interface
func (e EstimateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateValidationError{}

// Validate checks the field values on EstimatedJob with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EstimatedJob) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimatedJob with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EstimatedJobMultiError, or
// nil if none found.
func (m *EstimatedJob) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimatedJob) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetWorkerToPickupEstimate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimatedJobValidationError{
					field:  "WorkerToPickupEstimate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimatedJobValidationError{
					field:  "WorkerToPickupEstimate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkerToPickupEstimate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimatedJobValidationError{
				field:  "WorkerToPickupEstimate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPickupToDropOffEstimate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimatedJobValidationError{
					field:  "PickupToDropOffEstimate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimatedJobValidationError{
					field:  "PickupToDropOffEstimate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPickupToDropOffEstimate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimatedJobValidationError{
				field:  "PickupToDropOffEstimate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkerLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimatedJobValidationError{
					field:  "WorkerLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimatedJobValidationError{
					field:  "WorkerLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkerLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimatedJobValidationError{
				field:  "WorkerLocation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPickupLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimatedJobValidationError{
					field:  "PickupLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimatedJobValidationError{
					field:  "PickupLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPickupLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimatedJobValidationError{
				field:  "PickupLocation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDropOffLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimatedJobValidationError{
					field:  "DropOffLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimatedJobValidationError{
					field:  "DropOffLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDropOffLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimatedJobValidationError{
				field:  "DropOffLocation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EstimatedJobMultiError(errors)
	}

	return nil
}

// EstimatedJobMultiError is an error wrapping multiple validation errors
// returned by EstimatedJob.ValidateAll() if the designated constraints aren't met.
type EstimatedJobMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimatedJobMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimatedJobMultiError) AllErrors() []error { return m }

// EstimatedJobValidationError is the validation error returned by
// EstimatedJob.Validate if the designated constraints aren't met.
type EstimatedJobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimatedJobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimatedJobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimatedJobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimatedJobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimatedJobValidationError) ErrorName() string { return "EstimatedJobValidationError" }

// Error satisfies the builtin error interface
func (e EstimatedJobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimatedJob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimatedJobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimatedJobValidationError{}

// Validate checks the field values on GetAvailableJobsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAvailableJobsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAvailableJobsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAvailableJobsResponseMultiError, or nil if none found.
func (m *GetAvailableJobsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAvailableJobsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetJobs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAvailableJobsResponseValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAvailableJobsResponseValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAvailableJobsResponseValidationError{
					field:  fmt.Sprintf("Jobs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAvailableJobsResponseMultiError(errors)
	}

	return nil
}

// GetAvailableJobsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAvailableJobsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAvailableJobsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAvailableJobsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAvailableJobsResponseMultiError) AllErrors() []error { return m }

// GetAvailableJobsResponseValidationError is the validation error returned by
// GetAvailableJobsResponse.Validate if the designated constraints aren't met.
type GetAvailableJobsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvailableJobsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvailableJobsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvailableJobsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvailableJobsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvailableJobsResponseValidationError) ErrorName() string {
	return "GetAvailableJobsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAvailableJobsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvailableJobsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvailableJobsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvailableJobsResponseValidationError{}
