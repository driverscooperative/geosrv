// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/tollgate/v1beta1/tollgate.proto

package v1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TollgateServiceClient is the client API for TollgateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TollgateServiceClient interface {
	GetTollgate(ctx context.Context, in *GetTollgateRequest, opts ...grpc.CallOption) (*GetTollgateResponse, error)
	ListTollgates(ctx context.Context, in *ListTollgatesRequest, opts ...grpc.CallOption) (*ListTollgatesResponse, error)
}

type tollgateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTollgateServiceClient(cc grpc.ClientConnInterface) TollgateServiceClient {
	return &tollgateServiceClient{cc}
}

func (c *tollgateServiceClient) GetTollgate(ctx context.Context, in *GetTollgateRequest, opts ...grpc.CallOption) (*GetTollgateResponse, error) {
	out := new(GetTollgateResponse)
	err := c.cc.Invoke(ctx, "/api.tollgate.v1beta1.TollgateService/GetTollgate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tollgateServiceClient) ListTollgates(ctx context.Context, in *ListTollgatesRequest, opts ...grpc.CallOption) (*ListTollgatesResponse, error) {
	out := new(ListTollgatesResponse)
	err := c.cc.Invoke(ctx, "/api.tollgate.v1beta1.TollgateService/ListTollgates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TollgateServiceServer is the server API for TollgateService service.
// All implementations should embed UnimplementedTollgateServiceServer
// for forward compatibility
type TollgateServiceServer interface {
	GetTollgate(context.Context, *GetTollgateRequest) (*GetTollgateResponse, error)
	ListTollgates(context.Context, *ListTollgatesRequest) (*ListTollgatesResponse, error)
}

// UnimplementedTollgateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTollgateServiceServer struct {
}

func (UnimplementedTollgateServiceServer) GetTollgate(context.Context, *GetTollgateRequest) (*GetTollgateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTollgate not implemented")
}
func (UnimplementedTollgateServiceServer) ListTollgates(context.Context, *ListTollgatesRequest) (*ListTollgatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTollgates not implemented")
}

// UnsafeTollgateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TollgateServiceServer will
// result in compilation errors.
type UnsafeTollgateServiceServer interface {
	mustEmbedUnimplementedTollgateServiceServer()
}

func RegisterTollgateServiceServer(s grpc.ServiceRegistrar, srv TollgateServiceServer) {
	s.RegisterService(&TollgateService_ServiceDesc, srv)
}

func _TollgateService_GetTollgate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTollgateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TollgateServiceServer).GetTollgate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tollgate.v1beta1.TollgateService/GetTollgate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TollgateServiceServer).GetTollgate(ctx, req.(*GetTollgateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TollgateService_ListTollgates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTollgatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TollgateServiceServer).ListTollgates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tollgate.v1beta1.TollgateService/ListTollgates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TollgateServiceServer).ListTollgates(ctx, req.(*ListTollgatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TollgateService_ServiceDesc is the grpc.ServiceDesc for TollgateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TollgateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.tollgate.v1beta1.TollgateService",
	HandlerType: (*TollgateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTollgate",
			Handler:    _TollgateService_GetTollgate_Handler,
		},
		{
			MethodName: "ListTollgates",
			Handler:    _TollgateService_ListTollgates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tollgate/v1beta1/tollgate.proto",
}
