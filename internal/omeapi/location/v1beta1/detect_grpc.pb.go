// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: omeapi/location/v1beta1/detect.proto

package v1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DetectServiceClient is the client API for DetectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetectServiceClient interface {
	DetectTollgateCrossings(ctx context.Context, in *DetectTollgateCrossingsRequest, opts ...grpc.CallOption) (*DetectTollgateCrossingsResponse, error)
}

type detectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDetectServiceClient(cc grpc.ClientConnInterface) DetectServiceClient {
	return &detectServiceClient{cc}
}

func (c *detectServiceClient) DetectTollgateCrossings(ctx context.Context, in *DetectTollgateCrossingsRequest, opts ...grpc.CallOption) (*DetectTollgateCrossingsResponse, error) {
	out := new(DetectTollgateCrossingsResponse)
	err := c.cc.Invoke(ctx, "/omeapi.location.v1beta1.DetectService/DetectTollgateCrossings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetectServiceServer is the server API for DetectService service.
// All implementations should embed UnimplementedDetectServiceServer
// for forward compatibility
type DetectServiceServer interface {
	DetectTollgateCrossings(context.Context, *DetectTollgateCrossingsRequest) (*DetectTollgateCrossingsResponse, error)
}

// UnimplementedDetectServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDetectServiceServer struct {
}

func (UnimplementedDetectServiceServer) DetectTollgateCrossings(context.Context, *DetectTollgateCrossingsRequest) (*DetectTollgateCrossingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectTollgateCrossings not implemented")
}

// UnsafeDetectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetectServiceServer will
// result in compilation errors.
type UnsafeDetectServiceServer interface {
	mustEmbedUnimplementedDetectServiceServer()
}

func RegisterDetectServiceServer(s grpc.ServiceRegistrar, srv DetectServiceServer) {
	s.RegisterService(&DetectService_ServiceDesc, srv)
}

func _DetectService_DetectTollgateCrossings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectTollgateCrossingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectServiceServer).DetectTollgateCrossings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omeapi.location.v1beta1.DetectService/DetectTollgateCrossings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectServiceServer).DetectTollgateCrossings(ctx, req.(*DetectTollgateCrossingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DetectService_ServiceDesc is the grpc.ServiceDesc for DetectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DetectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omeapi.location.v1beta1.DetectService",
	HandlerType: (*DetectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DetectTollgateCrossings",
			Handler:    _DetectService_DetectTollgateCrossings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "omeapi/location/v1beta1/detect.proto",
}
