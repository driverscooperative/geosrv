// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: protos/helloworld/helloworld.proto

package helloworld

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloWorldClient is the client API for HelloWorld service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloWorldClient interface {
	SayHelloSimple(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ReplyMessage, error)
	SayHelloServerStreaming(ctx context.Context, in *Message, opts ...grpc.CallOption) (HelloWorld_SayHelloServerStreamingClient, error)
	SayHelloClientStreaming(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_SayHelloClientStreamingClient, error)
	SayHelloBothStreaming(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_SayHelloBothStreamingClient, error)
}

type helloWorldClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloWorldClient(cc grpc.ClientConnInterface) HelloWorldClient {
	return &helloWorldClient{cc}
}

func (c *helloWorldClient) SayHelloSimple(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ReplyMessage, error) {
	out := new(ReplyMessage)
	err := c.cc.Invoke(ctx, "/HelloWorld/SayHelloSimple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloWorldClient) SayHelloServerStreaming(ctx context.Context, in *Message, opts ...grpc.CallOption) (HelloWorld_SayHelloServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloWorld_ServiceDesc.Streams[0], "/HelloWorld/SayHelloServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldSayHelloServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloWorld_SayHelloServerStreamingClient interface {
	Recv() (*ReplyMessage, error)
	grpc.ClientStream
}

type helloWorldSayHelloServerStreamingClient struct {
	grpc.ClientStream
}

func (x *helloWorldSayHelloServerStreamingClient) Recv() (*ReplyMessage, error) {
	m := new(ReplyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloWorldClient) SayHelloClientStreaming(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_SayHelloClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloWorld_ServiceDesc.Streams[1], "/HelloWorld/SayHelloClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldSayHelloClientStreamingClient{stream}
	return x, nil
}

type HelloWorld_SayHelloClientStreamingClient interface {
	Send(*Message) error
	CloseAndRecv() (*ReplyMessages, error)
	grpc.ClientStream
}

type helloWorldSayHelloClientStreamingClient struct {
	grpc.ClientStream
}

func (x *helloWorldSayHelloClientStreamingClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloWorldSayHelloClientStreamingClient) CloseAndRecv() (*ReplyMessages, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReplyMessages)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloWorldClient) SayHelloBothStreaming(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_SayHelloBothStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloWorld_ServiceDesc.Streams[2], "/HelloWorld/SayHelloBothStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldSayHelloBothStreamingClient{stream}
	return x, nil
}

type HelloWorld_SayHelloBothStreamingClient interface {
	Send(*Message) error
	Recv() (*ReplyMessage, error)
	grpc.ClientStream
}

type helloWorldSayHelloBothStreamingClient struct {
	grpc.ClientStream
}

func (x *helloWorldSayHelloBothStreamingClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloWorldSayHelloBothStreamingClient) Recv() (*ReplyMessage, error) {
	m := new(ReplyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloWorldServer is the server API for HelloWorld service.
// All implementations must embed UnimplementedHelloWorldServer
// for forward compatibility
type HelloWorldServer interface {
	SayHelloSimple(context.Context, *Message) (*ReplyMessage, error)
	SayHelloServerStreaming(*Message, HelloWorld_SayHelloServerStreamingServer) error
	SayHelloClientStreaming(HelloWorld_SayHelloClientStreamingServer) error
	SayHelloBothStreaming(HelloWorld_SayHelloBothStreamingServer) error
	mustEmbedUnimplementedHelloWorldServer()
}

// UnimplementedHelloWorldServer must be embedded to have forward compatible implementations.
type UnimplementedHelloWorldServer struct {
}

func (UnimplementedHelloWorldServer) SayHelloSimple(context.Context, *Message) (*ReplyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloSimple not implemented")
}
func (UnimplementedHelloWorldServer) SayHelloServerStreaming(*Message, HelloWorld_SayHelloServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloServerStreaming not implemented")
}
func (UnimplementedHelloWorldServer) SayHelloClientStreaming(HelloWorld_SayHelloClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloClientStreaming not implemented")
}
func (UnimplementedHelloWorldServer) SayHelloBothStreaming(HelloWorld_SayHelloBothStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloBothStreaming not implemented")
}
func (UnimplementedHelloWorldServer) mustEmbedUnimplementedHelloWorldServer() {}

// UnsafeHelloWorldServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloWorldServer will
// result in compilation errors.
type UnsafeHelloWorldServer interface {
	mustEmbedUnimplementedHelloWorldServer()
}

func RegisterHelloWorldServer(s grpc.ServiceRegistrar, srv HelloWorldServer) {
	s.RegisterService(&HelloWorld_ServiceDesc, srv)
}

func _HelloWorld_SayHelloSimple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloWorldServer).SayHelloSimple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HelloWorld/SayHelloSimple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloWorldServer).SayHelloSimple(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloWorld_SayHelloServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloWorldServer).SayHelloServerStreaming(m, &helloWorldSayHelloServerStreamingServer{stream})
}

type HelloWorld_SayHelloServerStreamingServer interface {
	Send(*ReplyMessage) error
	grpc.ServerStream
}

type helloWorldSayHelloServerStreamingServer struct {
	grpc.ServerStream
}

func (x *helloWorldSayHelloServerStreamingServer) Send(m *ReplyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloWorld_SayHelloClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServer).SayHelloClientStreaming(&helloWorldSayHelloClientStreamingServer{stream})
}

type HelloWorld_SayHelloClientStreamingServer interface {
	SendAndClose(*ReplyMessages) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type helloWorldSayHelloClientStreamingServer struct {
	grpc.ServerStream
}

func (x *helloWorldSayHelloClientStreamingServer) SendAndClose(m *ReplyMessages) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloWorldSayHelloClientStreamingServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloWorld_SayHelloBothStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServer).SayHelloBothStreaming(&helloWorldSayHelloBothStreamingServer{stream})
}

type HelloWorld_SayHelloBothStreamingServer interface {
	Send(*ReplyMessage) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type helloWorldSayHelloBothStreamingServer struct {
	grpc.ServerStream
}

func (x *helloWorldSayHelloBothStreamingServer) Send(m *ReplyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloWorldSayHelloBothStreamingServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloWorld_ServiceDesc is the grpc.ServiceDesc for HelloWorld service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloWorld_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HelloWorld",
	HandlerType: (*HelloWorldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloSimple",
			Handler:    _HelloWorld_SayHelloSimple_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloServerStreaming",
			Handler:       _HelloWorld_SayHelloServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloClientStreaming",
			Handler:       _HelloWorld_SayHelloClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHelloBothStreaming",
			Handler:       _HelloWorld_SayHelloBothStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/helloworld/helloworld.proto",
}
