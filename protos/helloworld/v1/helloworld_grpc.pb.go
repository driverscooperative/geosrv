// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: protos/helloworld/v1/helloworld.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloWorldServiceClient is the client API for HelloWorldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloWorldServiceClient interface {
	SayHelloSimple(ctx context.Context, in *SayHelloSimpleRequest, opts ...grpc.CallOption) (*SayHelloSimpleResponse, error)
	SayHelloServerStreaming(ctx context.Context, in *SayHelloServerStreamingRequest, opts ...grpc.CallOption) (HelloWorldService_SayHelloServerStreamingClient, error)
	SayHelloClientStreaming(ctx context.Context, opts ...grpc.CallOption) (HelloWorldService_SayHelloClientStreamingClient, error)
	SayHelloBothStreaming(ctx context.Context, opts ...grpc.CallOption) (HelloWorldService_SayHelloBothStreamingClient, error)
}

type helloWorldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloWorldServiceClient(cc grpc.ClientConnInterface) HelloWorldServiceClient {
	return &helloWorldServiceClient{cc}
}

func (c *helloWorldServiceClient) SayHelloSimple(ctx context.Context, in *SayHelloSimpleRequest, opts ...grpc.CallOption) (*SayHelloSimpleResponse, error) {
	out := new(SayHelloSimpleResponse)
	err := c.cc.Invoke(ctx, "/protos.helloworld.v1.HelloWorldService/SayHelloSimple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloWorldServiceClient) SayHelloServerStreaming(ctx context.Context, in *SayHelloServerStreamingRequest, opts ...grpc.CallOption) (HelloWorldService_SayHelloServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloWorldService_ServiceDesc.Streams[0], "/protos.helloworld.v1.HelloWorldService/SayHelloServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldServiceSayHelloServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloWorldService_SayHelloServerStreamingClient interface {
	Recv() (*SayHelloServerStreamingResponse, error)
	grpc.ClientStream
}

type helloWorldServiceSayHelloServerStreamingClient struct {
	grpc.ClientStream
}

func (x *helloWorldServiceSayHelloServerStreamingClient) Recv() (*SayHelloServerStreamingResponse, error) {
	m := new(SayHelloServerStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloWorldServiceClient) SayHelloClientStreaming(ctx context.Context, opts ...grpc.CallOption) (HelloWorldService_SayHelloClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloWorldService_ServiceDesc.Streams[1], "/protos.helloworld.v1.HelloWorldService/SayHelloClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldServiceSayHelloClientStreamingClient{stream}
	return x, nil
}

type HelloWorldService_SayHelloClientStreamingClient interface {
	Send(*SayHelloClientStreamingRequest) error
	CloseAndRecv() (*SayHelloClientStreamingResponse, error)
	grpc.ClientStream
}

type helloWorldServiceSayHelloClientStreamingClient struct {
	grpc.ClientStream
}

func (x *helloWorldServiceSayHelloClientStreamingClient) Send(m *SayHelloClientStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloWorldServiceSayHelloClientStreamingClient) CloseAndRecv() (*SayHelloClientStreamingResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SayHelloClientStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloWorldServiceClient) SayHelloBothStreaming(ctx context.Context, opts ...grpc.CallOption) (HelloWorldService_SayHelloBothStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloWorldService_ServiceDesc.Streams[2], "/protos.helloworld.v1.HelloWorldService/SayHelloBothStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldServiceSayHelloBothStreamingClient{stream}
	return x, nil
}

type HelloWorldService_SayHelloBothStreamingClient interface {
	Send(*SayHelloBothStreamingRequest) error
	Recv() (*SayHelloBothStreamingResponse, error)
	grpc.ClientStream
}

type helloWorldServiceSayHelloBothStreamingClient struct {
	grpc.ClientStream
}

func (x *helloWorldServiceSayHelloBothStreamingClient) Send(m *SayHelloBothStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloWorldServiceSayHelloBothStreamingClient) Recv() (*SayHelloBothStreamingResponse, error) {
	m := new(SayHelloBothStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloWorldServiceServer is the server API for HelloWorldService service.
// All implementations must embed UnimplementedHelloWorldServiceServer
// for forward compatibility
type HelloWorldServiceServer interface {
	SayHelloSimple(context.Context, *SayHelloSimpleRequest) (*SayHelloSimpleResponse, error)
	SayHelloServerStreaming(*SayHelloServerStreamingRequest, HelloWorldService_SayHelloServerStreamingServer) error
	SayHelloClientStreaming(HelloWorldService_SayHelloClientStreamingServer) error
	SayHelloBothStreaming(HelloWorldService_SayHelloBothStreamingServer) error
	mustEmbedUnimplementedHelloWorldServiceServer()
}

// UnimplementedHelloWorldServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHelloWorldServiceServer struct {
}

func (UnimplementedHelloWorldServiceServer) SayHelloSimple(context.Context, *SayHelloSimpleRequest) (*SayHelloSimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloSimple not implemented")
}
func (UnimplementedHelloWorldServiceServer) SayHelloServerStreaming(*SayHelloServerStreamingRequest, HelloWorldService_SayHelloServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloServerStreaming not implemented")
}
func (UnimplementedHelloWorldServiceServer) SayHelloClientStreaming(HelloWorldService_SayHelloClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloClientStreaming not implemented")
}
func (UnimplementedHelloWorldServiceServer) SayHelloBothStreaming(HelloWorldService_SayHelloBothStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloBothStreaming not implemented")
}
func (UnimplementedHelloWorldServiceServer) mustEmbedUnimplementedHelloWorldServiceServer() {}

// UnsafeHelloWorldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloWorldServiceServer will
// result in compilation errors.
type UnsafeHelloWorldServiceServer interface {
	mustEmbedUnimplementedHelloWorldServiceServer()
}

func RegisterHelloWorldServiceServer(s grpc.ServiceRegistrar, srv HelloWorldServiceServer) {
	s.RegisterService(&HelloWorldService_ServiceDesc, srv)
}

func _HelloWorldService_SayHelloSimple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHelloSimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloWorldServiceServer).SayHelloSimple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.helloworld.v1.HelloWorldService/SayHelloSimple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloWorldServiceServer).SayHelloSimple(ctx, req.(*SayHelloSimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloWorldService_SayHelloServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SayHelloServerStreamingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloWorldServiceServer).SayHelloServerStreaming(m, &helloWorldServiceSayHelloServerStreamingServer{stream})
}

type HelloWorldService_SayHelloServerStreamingServer interface {
	Send(*SayHelloServerStreamingResponse) error
	grpc.ServerStream
}

type helloWorldServiceSayHelloServerStreamingServer struct {
	grpc.ServerStream
}

func (x *helloWorldServiceSayHelloServerStreamingServer) Send(m *SayHelloServerStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloWorldService_SayHelloClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServiceServer).SayHelloClientStreaming(&helloWorldServiceSayHelloClientStreamingServer{stream})
}

type HelloWorldService_SayHelloClientStreamingServer interface {
	SendAndClose(*SayHelloClientStreamingResponse) error
	Recv() (*SayHelloClientStreamingRequest, error)
	grpc.ServerStream
}

type helloWorldServiceSayHelloClientStreamingServer struct {
	grpc.ServerStream
}

func (x *helloWorldServiceSayHelloClientStreamingServer) SendAndClose(m *SayHelloClientStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloWorldServiceSayHelloClientStreamingServer) Recv() (*SayHelloClientStreamingRequest, error) {
	m := new(SayHelloClientStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloWorldService_SayHelloBothStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServiceServer).SayHelloBothStreaming(&helloWorldServiceSayHelloBothStreamingServer{stream})
}

type HelloWorldService_SayHelloBothStreamingServer interface {
	Send(*SayHelloBothStreamingResponse) error
	Recv() (*SayHelloBothStreamingRequest, error)
	grpc.ServerStream
}

type helloWorldServiceSayHelloBothStreamingServer struct {
	grpc.ServerStream
}

func (x *helloWorldServiceSayHelloBothStreamingServer) Send(m *SayHelloBothStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloWorldServiceSayHelloBothStreamingServer) Recv() (*SayHelloBothStreamingRequest, error) {
	m := new(SayHelloBothStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloWorldService_ServiceDesc is the grpc.ServiceDesc for HelloWorldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloWorldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.helloworld.v1.HelloWorldService",
	HandlerType: (*HelloWorldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloSimple",
			Handler:    _HelloWorldService_SayHelloSimple_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloServerStreaming",
			Handler:       _HelloWorldService_SayHelloServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloClientStreaming",
			Handler:       _HelloWorldService_SayHelloClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHelloBothStreaming",
			Handler:       _HelloWorldService_SayHelloBothStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/helloworld/v1/helloworld.proto",
}
